/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export type paths = {
  "/images/search": {
    /**
     * /images/search 
     * @description #### Route
     * 
     * https://api.thecatapi.com/v1/images/search
     * 
     * Search & Itterate through all approved images.
     * 
     * 
     * #### Query Parameters
     * 
     * | Key  | Required | Description                                                                                     |
     * |------|----------|-------------------------------------------------------------------------------------------------|
     * | size | optional | The size of image to return - `small`, `med` or `full`. `small` is perfect for Discord. Defaults to `med`
     * | mime_types | optional | Comma delimited string of the image types to return `gif`, `jpg`, or`png`. Defaults to return all types `jpg,gif,png`.                                                    |
     * | format | optional | Response format `json`, or`src`. `src` will redirect straight to the image, so is useful for putting a link straight into HTML as the 'src' on an 'img' tag. Defaults to `json`                            |
     * | order | optional | The order to return results in. `RANDOM`, `ASC` or `DESC`. If either `ASC` or `DESC` is passed then the Pagination headers will be on the response allowing you to see the total amount of results, and your current page. Default is `RANDOM`                      |
     * | page | optional | Integer - used for Paginating through all the results. Only used when order is `ASC` or `DESC`                      |
     * | limit | optional | Integer - number of results to return. Without an API Key you can only pass `1`, with a Key you can pass up to `25`. Default is `1`                      |
     * | category_ids | optional | Comma delimited string of integers, matching the `id`'s of the Categories to filter the search. These categories can found in the `/v1/categories` request. e.g. category_ids=2                      |
     * | breed_ids | optional | Comma delimited string of integers, matching the `id`'s of the Breeds to filter the search. These categories can found in the `/v1/breeds` request                      |
     * | has_breeds | optional | Only return images which have breed data attached. Integer - `0` or `1`. Default is `0`                        |
     * 
     * #### Pagination
     * If order=ASC or order=DESC is passed, then the response will contain these values as Headers
     * 
     * | Key  | Description                                                                                     |
     * |------|-------------------------------------------------------------------------------------------------|
     * | Pagination-Count | Integer - the total amount of results matching your search|
     * | Pagination-Page  | Integer - the current page
     * | Pagination-Limit | Integer - amount of results being returned per page
     * |
     */
    get: {
      /**
       * /images/search 
       * @description #### Route
       * 
       * https://api.thecatapi.com/v1/images/search
       * 
       * Search & Itterate through all approved images.
       * 
       * 
       * #### Query Parameters
       * 
       * | Key  | Required | Description                                                                                     |
       * |------|----------|-------------------------------------------------------------------------------------------------|
       * | size | optional | The size of image to return - `small`, `med` or `full`. `small` is perfect for Discord. Defaults to `med`
       * | mime_types | optional | Comma delimited string of the image types to return `gif`, `jpg`, or`png`. Defaults to return all types `jpg,gif,png`.                                                    |
       * | format | optional | Response format `json`, or`src`. `src` will redirect straight to the image, so is useful for putting a link straight into HTML as the 'src' on an 'img' tag. Defaults to `json`                            |
       * | order | optional | The order to return results in. `RANDOM`, `ASC` or `DESC`. If either `ASC` or `DESC` is passed then the Pagination headers will be on the response allowing you to see the total amount of results, and your current page. Default is `RANDOM`                      |
       * | page | optional | Integer - used for Paginating through all the results. Only used when order is `ASC` or `DESC`                      |
       * | limit | optional | Integer - number of results to return. Without an API Key you can only pass `1`, with a Key you can pass up to `25`. Default is `1`                      |
       * | category_ids | optional | Comma delimited string of integers, matching the `id`'s of the Categories to filter the search. These categories can found in the `/v1/categories` request. e.g. category_ids=2                      |
       * | breed_ids | optional | Comma delimited string of integers, matching the `id`'s of the Breeds to filter the search. These categories can found in the `/v1/breeds` request                      |
       * | has_breeds | optional | Only return images which have breed data attached. Integer - `0` or `1`. Default is `0`                        |
       * 
       * #### Pagination
       * If order=ASC or order=DESC is passed, then the response will contain these values as Headers
       * 
       * | Key  | Description                                                                                     |
       * |------|-------------------------------------------------------------------------------------------------|
       * | Pagination-Count | Integer - the total amount of results matching your search|
       * | Pagination-Page  | Integer - the current page
       * | Pagination-Limit | Integer - amount of results being returned per page
       * |
       */
      parameters?: {
          /**
           * @description [optional] breed ids from /breeds route 
           * @example beng
           */
          /**
           * @description [optional] true/false - Include the 'breeds' array - default true 
           * @example true
           */
        query?: {
          breed_ids?: string;
          include_breeds?: boolean;
        };
          /** @example application/json */
          /**
           * @description [optional] without it only the a basic set of images can be searched 
           * @example {{YOUR-API-KEY}}
           */
        header?: {
          "Content-Type"?: string;
          "x-api-key"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            Expires?: string;
            "Last-Modified"?: string;
            "Cache-Control"?: string;
            "Pagination-Count"?: number;
            "Pagination-Page"?: number;
            "Pagination-Limit"?: number;
            "Access-Control-Expose-Headers"?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/images/{image_id}": {
    /**
     * /images/:image_id - (Individual Image) 
     * @description #### Route
     * 
     * https://api.thecatapi.com/v1/images/:image_id
     */
    get: {
      /**
       * /images/:image_id - (Individual Image) 
       * @description #### Route
       * 
       * https://api.thecatapi.com/v1/images/:image_id
       */
      parameters: {
          /** @description [optional] if you want to save this request to your account stats */
          /** @description [optional] thumb , small, med or full - small is perfect for Discord */
          /** @description [optional] include the last Vote for the Image from your account & sub_id */
          /** @description [optional] include the Favourite for the Image from your account & sub_id */
        query?: {
          sub_id?: string;
          size?: string;
          include_vote?: string;
          include_favourite?: string;
        };
          /**
           * @description [optional]  will save this request to your account analytics
           *  
           * @example {{YOUR-API-KEY}}
           */
        header?: {
          "x-api-key"?: string;
        };
          /**
           * @description The id of the image to get 
           * @example MjAzMDMwMg
           */
        path: {
          image_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Connection?: string;
            "Content-Length"?: number;
            "Content-Type"?: string;
            Date?: string;
            Vary?: string;
            "X-Response-Time"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /**
     * /images/:image_id 
     * @description Delete any image you uploaded.
     */
    delete: {
      /**
       * /images/:image_id 
       * @description Delete any image you uploaded.
       */
      parameters: {
          /** @example application/json */
          /** @example example-api-key-for-your-account */
        header?: {
          "Content-Type"?: string;
          "x-api-key"?: string;
        };
          /**
           * @description The id of the image to delete 
           * @example {{image_id}}
           */
        path: {
          image_id: string;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/images/": {
    /**
     * /images/ (Your uploads) 
     * @description Returns the images from your account you uploaded via `/v1/images/upload`
     * 
     * 
     * #### Route
     * 
     * https://api.thecatapi.com/v1/images/
     * 
     * 
     * #### Pagination
     * If order=ASC or order=DESC is passed, then the response will contain these values as Headers
     * 
     * | Key  | Description                                                                                     |
     * |------|-------------------------------------------------------------------------------------------------|
     * | Pagination-Count | Integer - the total amount of results matching your search|
     * | Pagination-Page  | Integer - the current page
     * | Pagination-Limit | Integer - amount of results being returned per page
     * |
     */
    get: {
      /**
       * /images/ (Your uploads) 
       * @description Returns the images from your account you uploaded via `/v1/images/upload`
       * 
       * 
       * #### Route
       * 
       * https://api.thecatapi.com/v1/images/
       * 
       * 
       * #### Pagination
       * If order=ASC or order=DESC is passed, then the response will contain these values as Headers
       * 
       * | Key  | Description                                                                                     |
       * |------|-------------------------------------------------------------------------------------------------|
       * | Pagination-Count | Integer - the total amount of results matching your search|
       * | Pagination-Page  | Integer - the current page
       * | Pagination-Limit | Integer - amount of results being returned per page
       * |
       */
      parameters: {
          /**
           * @description [Optional] number of images to return valid  1 to 10 - default: 1 
           * @example 10
           */
          /**
           * @description [Optional] only works if account_id is present to page through your own uploads 
           * @example 0
           */
          /**
           * @description [Optional] only works if account_id is present, either ASC or DESC - ascending or descending. 
           * @example DESC
           */
          /**
           * @description [Optional] If you want to  
           * @example user1
           */
          /**
           * @description [Optional] Id's of the breeds to filter by 
           * @example 1,4,28
           */
          /**
           * @description [Optional] Id's of the categories to filter by 
           * @example 4
           */
          /**
           * @description [Optional] default is 'json', pass 'src' to redirect the request to the image's url - this is useful for setting the 'src' of an <img> tag. 
           * @example json
           */
          /** @description [Optional] filter to files you uploaded with the same name */
        query?: {
          limit?: number;
          page?: number;
          order?: string;
          sub_id?: string;
          breed_ids?: string;
          category_ids?: number;
          format?: string;
          original_filename?: string;
        };
          /** @example application/json */
          /**
           * @description - will return all the images from your account
           *  
           * @example {{YOUR-API-KEY}}
           */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            connection?: string;
            "content-length"?: number;
            "content-type"?: string;
            date?: string;
            vary?: string;
            "x-response-time"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/images/upload": {
    /**
     * /images/upload 
     * @description #### Route
     * 
     * https://api.thecatapi.com/v1/images/upload
     * 
     * Upload your own Cat pictures. Anything that doesn't contain a cat, or contains anything inappropriate will be rejected.
     */
    post: {
      /**
       * /images/upload 
       * @description #### Route
       * 
       * https://api.thecatapi.com/v1/images/upload
       * 
       * Upload your own Cat pictures. Anything that doesn't contain a cat, or contains anything inappropriate will be rejected.
       */
      parameters: {
          /** @example multipart/form-data */
          /**
           * @description - saves the uploaded image to your account. 
           * @example {{YOUR-API-KEY}}
           */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary 
             * @description File on your local machine
             */
            file?: string;
            /** @description [optional] - a string you can use to segment your images, e.g. knowing which of your own users uploaded it. */
            sub_id?: string;
            [key: string]: unknown | undefined;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/images/upload2": {
    /**
     * /images/upload2 for testing theImageAPI integration 
     * @description #### Route
     * 
     * https://api.thecatapi.com/v1/images/upload
     * 
     * Upload your own Cat pictures. Anything that doesn't contain a cat, or contains anything inappropriate will be rejected.
     */
    post: {
      /**
       * /images/upload2 for testing theImageAPI integration 
       * @description #### Route
       * 
       * https://api.thecatapi.com/v1/images/upload
       * 
       * Upload your own Cat pictures. Anything that doesn't contain a cat, or contains anything inappropriate will be rejected.
       */
      parameters: {
          /** @example multipart/form-data */
          /**
           * @description - saves the uplaoded image to your account. 
           * @example {{YOUR-API-KEY}}
           */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary 
             * @description File on your local machine
             */
            file?: string;
            /** @description [optional] - a string you can use to segment your images, e.g. knowing which of your own users uploaded it. */
            sub_id?: string;
            [key: string]: unknown | undefined;
          };
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/images/{image_id}/analysis": {
    /**
     * /images/:image_id/analysis 
     * @description Get the analysis of any images you uploaded.
     * 
     * Warning: the response format will change in the future as the Analysis engine improves.
     */
    get: {
      /**
       * /images/:image_id/analysis 
       * @description Get the analysis of any images you uploaded.
       * 
       * Warning: the response format will change in the future as the Analysis engine improves.
       */
      parameters: {
          /**
           * @description x- 
           * @example application/json
           */
          /** @example {{YOUR-API-KEY}} */
        header?: {
          "Content-Type"?: string;
          "x-api-key"?: string;
        };
          /**
           * @description Id of the image to return any analysis performed on it during upload. 
           * @example 9ccXTANkb
           */
        path: {
          image_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/favourites": {
    /** /favourites */
    get: {
      /** /favourites */
      parameters: {
          /** @description [optional] To get the favourites for only the 'sub_id' you used when creating the Favourite via POST /favourites */
        query?: {
          sub_id?: string;
        };
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
    /**
     * /favourites 
     * @description 
     * 
     * #### POST Body Parameters
     * 
     * | Key  | Required | Description                                                                                     |
     * |------|----------|-------------------------------------------------------------------------------------------------|
     * | image_id | required | The id of the image to favourite.
     * | sub_id | optional | A custom value you can set yourself, and then use to split the results of GET /favourites by, e.g. your own user's id.                                                    |
     */
    post: {
      /**
       * /favourites 
       * @description 
       * 
       * #### POST Body Parameters
       * 
       * | Key  | Required | Description                                                                                     |
       * |------|----------|-------------------------------------------------------------------------------------------------|
       * | image_id | required | The id of the image to favourite.
       * | sub_id | optional | A custom value you can set yourself, and then use to split the results of GET /favourites by, e.g. your own user's id.                                                    |
       */
      parameters: {
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      requestBody?: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/favourites/{favourite_id}": {
    /** /favourites/:favourite_id */
    get: {
      /** /favourites/:favourite_id */
      parameters: {
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
          /**
           * @description The id of the individual Favourite you want to get 
           * @example {{favourite_id}}
           */
        path: {
          favourite_id: string;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
    /** /favourites/:favourite_id */
    delete: {
      /** /favourites/:favourite_id */
      parameters: {
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
          /**
           * @description The id of the Favourite you want to delete from your account 
           * @example {{favourite_id}}
           */
        path: {
          favourite_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/votes": {
    /** /votes */
    get: {
      /** /votes */
      parameters: {
          /** @description [optional] To get the votes for only the 'sub_id' you used when creating the Vote via POST /votes */
        query?: {
          sub_id?: string;
        };
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "Pagination-Count"?: number;
            "Pagination-Page"?: number;
            "Pagination-Limit"?: number;
            "Access-Control-Expose-Headers"?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
    /** /votes */
    post: {
      /** /votes */
      parameters: {
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
      };
      requestBody?: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Date?: string;
            "Content-Type"?: string;
            "Transfer-Encoding"?: string;
            Connection?: string;
            Server?: number;
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "X-Response-Time"?: string;
            "Content-Encoding"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/votes/{vote_id}": {
    /** /votes/:vote_id */
    get: {
      /** /votes/:vote_id */
      parameters: {
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
          /**
           * @description The id of the individual Vote you want to get 
           * @example {{vote_id}}
           */
        path: {
          vote_id: string;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
    /** /votes/:vote_id */
    delete: {
      /** /votes/:vote_id */
      parameters: {
          /** @example application/json */
          /** @example {{YOUR-API-KEY}} */
        header: {
          "Content-Type"?: string;
          "x-api-key": string;
        };
        path: {
          vote_id: string;
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
  "/categories": {
    /**
     * /categories 
     * @description Returns all the available categories to use when search for images via `/v1/images/search` as the 'category_ids' parameter.
     */
    get: {
      /**
       * /categories 
       * @description Returns all the available categories to use when search for images via `/v1/images/search` as the 'category_ids' parameter.
       */
      parameters?: {
          /** @example application/json */
        header?: {
          "Content-Type"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            "Access-Control-Expose-Headers"?: string;
            Connection?: string;
            "Content-Encoding"?: string;
            "Content-Type"?: string;
            Date?: string;
            "Pagination-Count"?: number;
            "Pagination-Limit"?: number;
            "Pagination-Page"?: number;
            Server?: number;
            "Strict-Transport-Security"?: string;
            "Transfer-Encoding"?: string;
            Vary?: string;
            "X-Content-Type-Options"?: string;
            "X-DNS-Prefetch-Control"?: string;
            "X-Download-Options"?: string;
            "X-Frame-Options"?: string;
            "X-Response-Time"?: string;
            "X-XSS-Protection"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/breeds": {
    /** /breeds */
    get: {
      /** /breeds */
      parameters?: {
          /** @example 10 */
          /** @example 0 */
        query?: {
          limit?: number;
          page?: number;
        };
          /** @example application/json */
        header?: {
          "Content-Type"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Connection?: string;
            "Content-Length"?: number;
            "Content-Type"?: string;
            Date?: string;
            Vary?: string;
            "X-Response-Time"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/breeds/{breed_id}": {
    /** /breeds/:breed_id */
    get: {
      /** /breeds/:breed_id */
      parameters: {
          /** @example application/json */
        header?: {
          "Content-Type"?: string;
        };
        path: {
          breed_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            Connection?: string;
            "Content-Length"?: number;
            "Content-Type"?: string;
            Date?: string;
            Vary?: string;
            "X-Response-Time"?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/sources": {
    /** /sources */
    get: {
      /** /sources */
      parameters?: {
          /** @example 10 */
          /** @example 0 */
        query?: {
          limit?: number;
          page?: number;
        };
          /** @example application/json */
        header?: {
          "Content-Type"?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            "X-DNS-Prefetch-Control"?: string;
            "X-Frame-Options"?: string;
            "Strict-Transport-Security"?: string;
            "X-Download-Options"?: string;
            "X-Content-Type-Options"?: string;
            "X-XSS-Protection"?: string;
            Vary?: string;
            "Pagination-Count"?: number;
            "Pagination-Page"?: number;
            "Pagination-Limit"?: number;
            "Access-Control-Expose-Headers"?: string;
            "Cache-Control"?: string;
            "Content-Type"?: string;
            "X-Response-Time"?: string;
            "Content-Length"?: number;
            Date?: string;
            Connection?: string;
          };
          content: {
            "application/json": Record<string, never>;
          };
        };
      };
    };
  };
  "/": {
    /** version */
    get: {
      /** version */
      responses: {
        /** @description Successful response */
        200: {
          content: {
            "application/json": unknown;
          };
        };
      };
    };
  };
};

export type webhooks = Record<string, never>;

export type components = {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};

export type external = Record<string, never>;

export type operations = Record<string, never>;
